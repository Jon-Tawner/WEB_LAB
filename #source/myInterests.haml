!!!
%html{:lang => "ru"}
  %head
    %meta{:charset => "UTF-8"}/
    %meta{:content => "IE=edge", "http-equiv" => "X-UA-Compatible"}/
    %meta{:content => "width=device-width, initial-scale=1.0", :name => "viewport"}/
    %link{:href => "public/css/style.css", :rel => "stylesheet"}/
    %title Мои интересы
  %body
    %header
      %h1 Мои интересы
      =Haml::Engine.new(File.read('nav.haml')).render
    %section
      %nav#navAnch
        %ul.list
    %main
      %section.article
        %h2
          %a.anchorArt{:name => "hobby_anchor"} Моё хобби
        %p
          PATHNAME – частичный или полный путь к документу, который должен вызваться в результате интерпретации
          URL. Различные WEB-сервера сконфигурированы по разному для интерпретации пути доступа к документу.
          Например, при использовании CGI-скриптов (исполняемых программ), они обычно собираются в одном или
          нескольких выделенных каталогах, путь к которым записан в специальных параметрах WEB-сервера. Для данных
          каталогов WEB-сервером выделяется специальный логический путь, который и используется в URL. Если
          WEB-сервер видит данный путь, то запрашиваемый файл интерпретируется как исполняемый модуль. В противном
          случае, запрашиваемый файл интерпретируется просто как файл данных, даже если он является исполняемым
          модулем. Следует отметить, что при описании пути используется UNIX-подобный синтаксис, где, в отличии от
          DOS и Windows, используются прямые слеши вместо обратных. Если после сетевого имени машины сразу идет
          имя документа, то он должен находиться в корневом каталоге на удаленной машине или (как правило) в
          каталоге, выделенном WEB-сервером в качестве корневого. Если же URL заканчивается сетевым именем машины,
          то в качестве документа запрашивается документ из корневого каталога удаленной машины с именем,
          установленным в настройках WEB-сервера (как правило, это index.html).
      %section.article
        %h2
          %a.anchorArt{:name => "books_anchor"} Мои любимые книги
        %p
          Например, при использовании CGI-скриптов (исполняемых программ), они обычно собираются в одном или
          нескольких выделенных каталогах, путь к которым записан в специальных параметрах WEB-сервера. Для данных
          каталогов WEB-сервером выделяется специальный логический путь, который и используется в URL. Если
          WEB-сервер видит данный путь, то запрашиваемый файл интерпретируется как исполняемый модуль. В противном
          случае, запрашиваемый файл интерпретируется просто как файл данных, даже если он является исполняемым
          модулем. Следует отметить, что при описании пути используется UNIX-подобный синтаксис, где, в отличии от
          DOS и Windows, используются прямые слеши вместо обратных. Если после сетевого имени машины сразу идет
          имя документа, то он должен находиться в корневом каталоге на удаленной машине или (как правило) в
          каталоге, выделенном WEB-сервером в качестве корневого. Если же URL заканчивается сетевым именем машины,
          то в качестве документа запрашивается документ из корневого каталога удаленной машины с именем,
          установленным в настройках WEB-сервера (как правило, это index.html).
      %section.article
        %h2
          %a.anchorArt{:name => "music_anchor"} Моя любимая музыка
        %p
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolor laborum facilis voluptatibus reiciendis
          vero quia rerum numquam, accusamus libero! Voluptas explicabo suscipit ad natus ex saepe perferendis
          molestiae soluta ipsam?
      %section.article
        %h2
          %a.anchorArt{:name => "movies_anchor"} Мои любимые фильмы
        %p
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam necessitatibus quis optio dolores
          deleniti nihil iure tenetur, quod cumque voluptas, illo nam ut officia magnam accusantium non aperiam
          accusamus aspernatur! Asperiores officia veniam rem, nobis quis non fugit dolor, velit optio explicabo
          molestias iure? Fugiat incidunt molestiae aspernatur deleniti quos maxime repellendus quaerat
          dignissimos nostrum nemo minus, distinctio quis officiis dolor placeat accusamus! Hic corrupti atque
          tenetur, suscipit distinctio architecto, iste perferendis, mollitia sit praesentium iusto ea dolor rem
          aut?
    %script{:src => "public/js/navListAnch.js"}
    =Haml::Engine.new(File.read('ShareScrp.haml')).render